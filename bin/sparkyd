use DBIish;
use Time::Crontab;
use YAMLish;

sub MAIN (
  Str  :$root = '/home/' ~ %*ENV<USER> ~ '/.sparky/projects', 
  Str  :$work-root = '/home/' ~ %*ENV<USER> ~ '/.sparky/work', 
  Str  :$reports-root = '/home/' ~ %*ENV<USER> ~ '/.sparky/reports',
  Int  :$timeout = 300,
)

{


  react {

    mkdir $root;
    mkdir $work-root;

    my $db-name = "$root/db.sqlite3".IO.absolute;
    my $dbh = DBIish.connect("SQLite", database => $db-name );

    sub run-project($dir, $project) {

      my $skip =  False;

      if "$dir/sparky.yaml".IO ~~ :f {
        my %config = load-yaml(slurp "$dir/sparky.yaml");
        if %config<crontab> {
          my $crontab = %config<crontab>;
          my $tc = Time::Crontab.new(:$crontab);
          if $tc.match(DateTime.now, :truncate(True)) {
            say "$project is passed by cron: $crontab ...";
          } else {
            # say "$project is skipped by cron: $crontab ...";
            $skip =  True
          }
        }
      }

      if $skip {
        run-project($dir, $project);
      } else {

          mkdir "$work-root/$project";
    
          my $sth = $dbh.prepare(q:to/STATEMENT/);
            INSERT INTO builds (project, state)
            VALUES ( ?,?)
          STATEMENT
          $sth.execute($project, 0); 
    
          $sth = $dbh.prepare(q:to/STATEMENT/);
              SELECT max(ID) AS build_id
              FROM builds
              STATEMENT
          
          $sth.execute();
          
          my @rows = $sth.allrows();
          my $build_id = @rows[0][0];
          
          $sth.finish;
    
          whenever Proc::Async.new(
            'sparky-runner.pl6', 
            "--dir=$dir", 
            "--project=$project",
            "--reports-root=$reports-root",
            "--db=$db-name",
            "--build_id=$build_id"
          ).start {
            sleep($timeout);
            run-project($dir, $project) if "$dir/sparrowfile".IO ~~ :f;
          }

      }
    }
    
    sub add-dirs() {
      state %seen;
      for dir($root) -> $dir {
        next if %seen{$dir}++;
        next unless "$dir/sparrowfile".IO ~~ :f;
        run-project($dir, $dir.basename);
      }
    }
    
    whenever IO::Notification.watch-path($root) {
      add-dirs();
    }

    add-dirs();
  }
} 
